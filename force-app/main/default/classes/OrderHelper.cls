public without sharing class OrderHelper {

    /**
     * @name AfterUpdate
     * @description 
     * @param List<Order> newList
     * @param List<Order> oldList
     * @return void
    **/
    public static void AfterUpdate(List<Order> newList, List<Order> oldList){
        Set<Id> orderIds = new Set<Id>();
        for (Integer i = 0; i < newList.size(); i++){
            if ((newList[i].Status != null && oldList[i].Status != null) && 
                newList[i].Status == Constants.ACTIVATED_ORDER_STATUS && oldList[i].Status != Constants.ACTIVATED_ORDER_STATUS){
                orderIds.add(newList[i].Id);
            }
        }
        
        OrderHelper.RollUpOrderItems(orderIds);
    }

    /**
     * @name RollUpOrderItems
     * @description Given a set of Activated Order ids, query the child Order Items and related Products to calculate Inventory levels
     * @param Set<Id> activatedOrderIds
     * @return void
    **/
    public static void RollUpOrderItems(Set<Id> activatedOrderIds){
        Map<Id, Product2> productMap = new Map<Id, Product2>();

		for(OrderItem orderInstance : [
            SELECT Id, Product2Id, Product2.Quantity_Ordered__c, Quantity 
            FROM OrderItem 
            WHERE OrderId IN :activatedOrderIds
        ]){
            if(!productMap.containsKey(orderInstance.Product2Id)){
                productMap.put(orderInstance.Product2Id, new Product2(
                    Id = orderInstance.Product2Id, 
                    Quantity_Ordered__c = 0
                ));
            }
        }
        
        for(AggregateResult aggregateResult : [
            SELECT SUM(Quantity) Quantity, Product2Id 
            FROM OrderItem 
            WHERE Product2Id IN : productMap.keySet() 
            GROUP BY Product2Id
        ]) {
            Id product2Id = (Id)aggregateResult.get('Product2Id');
            Product2 productInstance = productMap.get(product2Id);
            productInstance.Quantity_Ordered__c = (Decimal)aggregateResult.get('Quantity');
            productMap.put(product2Id , productInstance);
        }

        if(productMap.values().size() > 0){
            update productMap.values();
        }
    }

}